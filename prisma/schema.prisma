// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator prismaClassGenerator {
  provider = "prisma-class-generator"
  output   = "./generated/classes"
  dryRun   = false
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  firstName    String   @map("first_name")
  lastName     String   @map("last_name")
  email        String   @unique
  password     String
  role         Role
  avatar       String?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  refreshToken String?  @unique @map("refresh_token")

  managedStudents Student[] @relation("ManagerStudents")
  curatedStudents Student[] @relation("CuratorStudents")

  @@map("user")
}

model Student {
  id          String    @id @default(uuid())
  firstName   String    @map("first_name")
  lastName    String    @map("last_name")
  phone       String    @unique
  addedAt     DateTime  @default(now()) @map("added_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  isDeleted   Boolean   @default(false) @map("is_deleted")
  deletedAt   DateTime? @map("deleted_at")
  coursePrice Int       @map("course_price")

  deleteReasonId Int?          @map("delete_reason_id")
  deleteReason   DeleteReason? @relation(fields: [deleteReasonId], references: [id])

  isRefund Boolean @default(false) @map("is_refund")
  refund   Refund? @relation("StudentRefund")

  managerId String? @map("manager_id")
  manager   User?   @relation("ManagerStudents", fields: [managerId], references: [id])

  curatorId String? @map("curator_id")
  curator   User?   @relation("CuratorStudents", fields: [curatorId], references: [id])

  groupId String? @map("group_id")
  group   Group?  @relation(fields: [groupId], references: [id])

  courseId String? @map("course_id")
  course   Course? @relation(fields: [courseId], references: [id])

  payment Payment[] @relation("StudentPayments")

  @@index([managerId])
  @@index([curatorId])
  @@index([groupId])
  @@index([courseId])
  @@map("student")
}

model DeleteReason {
  id      Int       @id @default(autoincrement())
  nameUz  String    @map("name_uz")
  nameRu  String    @map("name_ru")
  Student Student[]

  @@map("delete_reason")
}

model Refund {
  id        String   @id @default(uuid())
  amount    Int
  comment   String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  studentId String  @unique @map("student_id")
  student   Student @relation("StudentRefund", fields: [studentId], references: [id])

  @@map("refund")
}

model Group {
  id             String         @id @default(uuid())
  name           String         @unique
  learningFormat LearningFormat @map("learning_format")
  groupColor     String         @map("group_color")
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")
  students       Student[]

  @@map("group")
}

model Course {
  id        String    @id @default(uuid())
  name      String    @unique
  icon      String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  students  Student[]

  @@map("course")
}

model Payment {
  id         String   @id @default(uuid())
  amount     Int
  payment_at DateTime @default(now()) @map("payment_at")

  paymentMethodId Int           @map("payment_method_id")
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])

  student   Student @relation("StudentPayments", fields: [studentId], references: [id])
  studentId String

  @@index([studentId])
  @@index([paymentMethodId])
  @@map("payment")
}

model PaymentMethod {
  id       Int       @id @default(autoincrement())
  nameUz   String    @map("name_uz")
  nameRu   String    @map("name_ru")
  payments Payment[]

  @@map("payment_method")
}

enum Role {
  ADMIN
  MANAGER
  CURATOR
}

enum LearningFormat {
  ONLINE
  OFFLINE
}
